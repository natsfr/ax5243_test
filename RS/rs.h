#ifndef RS_H_INCLUDED
#define RS_H_INCLUDED

#include <stdint.h>

#define MLEN       4
#define GLEN       16
#define NLEN       15               // Block Length
#define KLEN       11               // Data
#define RLEN       NLEN-KLEN        // Correction symbols

// Field generator: F(X) = X^4+X+1
#define PGX             0x13

// Primitive: a(X) = X = a

#define GF16_mask       0x0F;

#define LEFT            1
#define RIGHT           0

/*
uint8_t GF16_vectors[GLEN][MLEN] = {
    {0, 0, 0, 0},               // 0 | a^-inf
    {0, 0, 0, 1},               // 1 | a^0
    {0, 0, 1, 0},               // a | 0.X^3 + 0.X^2 + 1.X^1 + 0.X^0
    {0, 1, 0, 0},               // a^2 | 0.X^3 + 1.X^2 + 0.X^1 + 0.X^0
    {1, 0, 0, 0},               // a^3 | 1.X^3 + 0.X^2 + 0.X^1 + 0.X^0
    {0, 0, 1, 1},               // a^4 | 0.X^3 + 0.X^2 + 1.X^1 + 1.X^0
    {0, 1, 1, 0},
    {1, 1, 0, 0},
    {1, 0, 1, 1},
    {0, 1, 0, 1},
    {1, 0, 1, 0},
    {0, 1, 1, 1},
    {1, 1, 1, 0},
    {1, 1, 1, 1},
    {1, 1, 0, 1},
    {1, 0, 0, 1}
};
*/

static const uint8_t GF16_integers[GLEN] = {
    0x00,               // 0 | a^-inf
    0x01,               // 1 | a^0
    0x02,               // a | 0.X^3 + 0.X^2 + 1.X^1 + 0.X^0
    0x04,               // a^2 | 0.X^3 + 1.X^2 + 0.X^1 + 0.X^0
    0x08,               // a^3 | 1.X^3 + 0.X^2 + 0.X^1 + 0.X^0
    0x03,               // a^4 | 0.X^3 + 0.X^2 + 1.X^1 + 1.X^0
    0x06,               // a^5
    0x0C,               // a^6
    0x0B,               // a^07
    0x05,               // a^08
    0x0A,               // a^09
    0x07,               // a^10
    0x0E,               // a^11
    0x0F,               // a^12
    0x0D,               // a^13
    0x09                // a^14
};

// G(x) polynomial X^4+13.X^3+12.X^2+8.X+7
static const uint8_t RS_GX[NLEN] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0xD, 0xC, 0x8, 0x7};

/*static uint8_t GF16_div[GLEN][GLEN];
static uint8_t GF16_mul[GLEN][GLEN];
static uint8_t GF16_mod[GLEN][GLEN];*/

static const uint8_t GF16_mul[16][16] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, \
                                    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, \
                                    0x0, 0x2, 0x4, 0x6, 0x8, 0xA, 0xC, 0xE, 0x3, 0x1, 0x7, 0x5, 0xB, 0x9, 0xF, 0xD, \
                                    0x0, 0x3, 0x6, 0x5, 0xC, 0xF, 0xA, 0x9, 0xB, 0x8, 0xD, 0xE, 0x7, 0x4, 0x1, 0x2, \
                                    0x0, 0x4, 0x8, 0xC, 0x3, 0x7, 0xB, 0xF, 0x6, 0x2, 0xE, 0xA, 0x5, 0x1, 0xD, 0x9, \
                                    0x0, 0x5, 0xA, 0xF, 0x7, 0x2, 0xD, 0x8, 0xE, 0xB, 0x4, 0x1, 0x9, 0xC, 0x3, 0x6, \
                                    0x0, 0x6, 0xC, 0xA, 0xB, 0xD, 0x7, 0x1, 0x5, 0x3, 0x9, 0xF, 0xE, 0x8, 0x2, 0x4, \
                                    0x0, 0x7, 0xE, 0x9, 0xF, 0x8, 0x1, 0x6, 0xD, 0xA, 0x3, 0x4, 0x2, 0x5, 0xC, 0xB, \
                                    0x0, 0x8, 0x3, 0xB, 0x6, 0xE, 0x5, 0xD, 0xC, 0x4, 0xF, 0x7, 0xA, 0x2, 0x9, 0x1, \
                                    0x0, 0x9, 0x1, 0x8, 0x2, 0xB, 0x3, 0xA, 0x4, 0xD, 0x5, 0xC, 0x6, 0xF, 0x7, 0xE, \
                                    0x0, 0xA, 0x7, 0xD, 0xE, 0x4, 0x9, 0x3, 0xF, 0x5, 0x8, 0x2, 0x1, 0xB, 0x6, 0xC, \
                                    0x0, 0xB, 0x5, 0xE, 0xA, 0x1, 0xF, 0x4, 0x7, 0xC, 0x2, 0x9, 0xD, 0x6, 0x8, 0x3, \
                                    0x0, 0xC, 0xB, 0x7, 0x5, 0x9, 0xE, 0x2, 0xA, 0x6, 0x1, 0xD, 0xF, 0x3, 0x4, 0x8, \
                                    0x0, 0xD, 0x9, 0x4, 0x1, 0xC, 0x8, 0x5, 0x2, 0xF, 0xB, 0x6, 0x3, 0xE, 0xA, 0x7, \
                                    0x0, 0xE, 0xF, 0x1, 0xD, 0x3, 0x2, 0xC, 0x9, 0x7, 0x6, 0x8, 0x4, 0xA, 0xB, 0x5, \
                                    0x0, 0xF, 0xD, 0x2, 0x9, 0x6, 0x4, 0xB, 0x1, 0xE, 0xC, 0x3, 0x8, 0x7, 0x5, 0xA };

static const uint8_t GF16_div[16][16] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, \
                                    0x0, 0x1, 0x9, 0xE, 0xD, 0xB, 0x7, 0x6, 0xF, 0x2, 0xC, 0x5, 0xA, 0x4, 0x3, 0x8, \
                                    0x0, 0x2, 0x1, 0xF, 0x9, 0x5, 0xE, 0xC, 0xD, 0x4, 0xB, 0xA, 0x7, 0x8, 0x6, 0x3, \
                                    0x0, 0x3, 0x8, 0x1, 0x4, 0xE, 0x9, 0xA, 0x2, 0x6, 0x7, 0xF, 0xD, 0xC, 0x5, 0xB, \
                                    0x0, 0x4, 0x2, 0xD, 0x1, 0xA, 0xF, 0xB, 0x9, 0x8, 0x5, 0x7, 0xE, 0x3, 0xC, 0x6, \
                                    0x0, 0x5, 0xB, 0x3, 0xC, 0x1, 0x8, 0xD, 0x6, 0xA, 0x9, 0x2, 0x4, 0x7, 0xF, 0xE, \
                                    0x0, 0x6, 0x3, 0x2, 0x8, 0xF, 0x1, 0x7, 0x4, 0xC, 0xE, 0xD, 0x9, 0xB, 0xA, 0x5, \
                                    0x0, 0x7, 0xA, 0xC, 0x5, 0x4, 0x6, 0x1, 0xB, 0xE, 0x2, 0x8, 0x3, 0xF, 0x9, 0xD, \
                                    0x0, 0x8, 0x4, 0x9, 0x2, 0x7, 0xD, 0x5, 0x1, 0x3, 0xA, 0xE, 0xF, 0x6, 0xB, 0xC, \
                                    0x0, 0x9, 0xD, 0x7, 0xF, 0xC, 0xA, 0x3, 0xE, 0x1, 0x6, 0xB, 0x5, 0x2, 0x8, 0x4, \
                                    0x0, 0xA, 0x5, 0x6, 0xB, 0x2, 0x3, 0x9, 0xC, 0x7, 0x1, 0x4, 0x8, 0xE, 0xD, 0xF, \
                                    0x0, 0xB, 0xC, 0x8, 0x6, 0x9, 0x4, 0xF, 0x3, 0x5, 0xD, 0x1, 0x2, 0xA, 0xE, 0x7, \
                                    0x0, 0xC, 0x6, 0x4, 0x3, 0xD, 0x2, 0xE, 0x8, 0xB, 0xF, 0x9, 0x1, 0x5, 0x7, 0xA, \
                                    0x0, 0xD, 0xF, 0xA, 0xE, 0x6, 0x5, 0x8, 0x7, 0x9, 0x3, 0xC, 0xB, 0x1, 0x4, 0x2, \
                                    0x0, 0xE, 0x7, 0xB, 0xA, 0x8, 0xC, 0x2, 0x5, 0xF, 0x4, 0x3, 0x6, 0xD, 0x1, 0x9, \
                                    0x0, 0xF, 0xE, 0x5, 0x7, 0x3, 0xB, 0x4, 0xA, 0xD, 0x8, 0x6, 0xC, 0x9, 0x2, 0x1 };



uint8_t gf_add(uint8_t a, uint8_t b);
uint8_t gf_mul_tab(uint8_t a, uint8_t b);
uint8_t gf_div_tab(uint8_t a, uint8_t b);
void gf_poly_scalar_add(uint8_t * a, uint8_t scalar, uint8_t len);
void gf_poly_scalar_mul(uint8_t * a, uint8_t scalar, uint8_t len);

void poly_shift(uint8_t * a, uint8_t * b, uint8_t exponent, uint8_t dir, uint8_t size);

uint8_t poly_deg(uint8_t * a, uint8_t size);

void gf_poly_mod(uint8_t * a, uint8_t * b, uint8_t size);

#endif // RS_H_INCLUDED
