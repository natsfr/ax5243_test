# 1 "RS/rs.c"
# 1 "/home/nats/MPLABXProjects/F4IHX_Tracker.X"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "RS/rs.c"
# 1 "RS/rs.h" 1



# 1 "/opt/microchip/xc16/v2.00/bin/bin/../../include/stdint.h" 1 3 4
# 20 "/opt/microchip/xc16/v2.00/bin/bin/../../include/stdint.h" 3 4
# 1 "/opt/microchip/xc16/v2.00/bin/bin/../../include/bits/alltypes.h" 1 3 4
# 144 "/opt/microchip/xc16/v2.00/bin/bin/../../include/bits/alltypes.h" 3 4
typedef signed char int8_t;




typedef signed int int16_t;




typedef signed long int int32_t;




typedef signed long long int int64_t;




typedef long long int intmax_t;




typedef unsigned char uint8_t;




typedef unsigned int uint16_t;




typedef unsigned long int uint32_t;




typedef unsigned long long int uint64_t;




typedef unsigned long long int uintmax_t;
# 215 "/opt/microchip/xc16/v2.00/bin/bin/../../include/bits/alltypes.h" 3 4
typedef unsigned int uintptr_t;
# 249 "/opt/microchip/xc16/v2.00/bin/bin/../../include/bits/alltypes.h" 3 4
typedef int intptr_t;
# 21 "/opt/microchip/xc16/v2.00/bin/bin/../../include/stdint.h" 2 3 4

typedef signed int int_fast8_t;
typedef signed int int_fast16_t;
typedef signed long int int_fast24_t;
typedef signed long int int_fast32_t;
typedef signed long long int int_fast64_t;

typedef signed char int_least8_t;
typedef signed int int_least16_t;
typedef signed long int int_least24_t;
typedef signed long int int_least32_t;
typedef signed long long int int_least64_t;

typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned long int uint_fast24_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long long int uint_fast64_t;

typedef unsigned char uint_least8_t;
typedef unsigned int uint_least16_t;
typedef unsigned long int uint_least24_t;
typedef unsigned long int uint_least32_t;
typedef unsigned long long int uint_least64_t;
# 128 "/opt/microchip/xc16/v2.00/bin/bin/../../include/stdint.h" 3 4
# 1 "/opt/microchip/xc16/v2.00/bin/bin/../../include/bits/stdint.h" 1 3 4
# 129 "/opt/microchip/xc16/v2.00/bin/bin/../../include/stdint.h" 2 3 4
# 5 "RS/rs.h" 2
# 43 "RS/rs.h"
static const uint8_t GF16_integers[16] = {
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x03,
    0x06,
    0x0C,
    0x0B,
    0x05,
    0x0A,
    0x07,
    0x0E,
    0x0F,
    0x0D,
    0x09
};


static const uint8_t RS_GX[15] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0xD, 0xC, 0x8, 0x7};





static const uint8_t GF16_mul[16][16] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,
                                    0x0, 0x2, 0x4, 0x6, 0x8, 0xA, 0xC, 0xE, 0x3, 0x1, 0x7, 0x5, 0xB, 0x9, 0xF, 0xD,
                                    0x0, 0x3, 0x6, 0x5, 0xC, 0xF, 0xA, 0x9, 0xB, 0x8, 0xD, 0xE, 0x7, 0x4, 0x1, 0x2,
                                    0x0, 0x4, 0x8, 0xC, 0x3, 0x7, 0xB, 0xF, 0x6, 0x2, 0xE, 0xA, 0x5, 0x1, 0xD, 0x9,
                                    0x0, 0x5, 0xA, 0xF, 0x7, 0x2, 0xD, 0x8, 0xE, 0xB, 0x4, 0x1, 0x9, 0xC, 0x3, 0x6,
                                    0x0, 0x6, 0xC, 0xA, 0xB, 0xD, 0x7, 0x1, 0x5, 0x3, 0x9, 0xF, 0xE, 0x8, 0x2, 0x4,
                                    0x0, 0x7, 0xE, 0x9, 0xF, 0x8, 0x1, 0x6, 0xD, 0xA, 0x3, 0x4, 0x2, 0x5, 0xC, 0xB,
                                    0x0, 0x8, 0x3, 0xB, 0x6, 0xE, 0x5, 0xD, 0xC, 0x4, 0xF, 0x7, 0xA, 0x2, 0x9, 0x1,
                                    0x0, 0x9, 0x1, 0x8, 0x2, 0xB, 0x3, 0xA, 0x4, 0xD, 0x5, 0xC, 0x6, 0xF, 0x7, 0xE,
                                    0x0, 0xA, 0x7, 0xD, 0xE, 0x4, 0x9, 0x3, 0xF, 0x5, 0x8, 0x2, 0x1, 0xB, 0x6, 0xC,
                                    0x0, 0xB, 0x5, 0xE, 0xA, 0x1, 0xF, 0x4, 0x7, 0xC, 0x2, 0x9, 0xD, 0x6, 0x8, 0x3,
                                    0x0, 0xC, 0xB, 0x7, 0x5, 0x9, 0xE, 0x2, 0xA, 0x6, 0x1, 0xD, 0xF, 0x3, 0x4, 0x8,
                                    0x0, 0xD, 0x9, 0x4, 0x1, 0xC, 0x8, 0x5, 0x2, 0xF, 0xB, 0x6, 0x3, 0xE, 0xA, 0x7,
                                    0x0, 0xE, 0xF, 0x1, 0xD, 0x3, 0x2, 0xC, 0x9, 0x7, 0x6, 0x8, 0x4, 0xA, 0xB, 0x5,
                                    0x0, 0xF, 0xD, 0x2, 0x9, 0x6, 0x4, 0xB, 0x1, 0xE, 0xC, 0x3, 0x8, 0x7, 0x5, 0xA };

static const uint8_t GF16_div[16][16] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                                    0x0, 0x1, 0x9, 0xE, 0xD, 0xB, 0x7, 0x6, 0xF, 0x2, 0xC, 0x5, 0xA, 0x4, 0x3, 0x8,
                                    0x0, 0x2, 0x1, 0xF, 0x9, 0x5, 0xE, 0xC, 0xD, 0x4, 0xB, 0xA, 0x7, 0x8, 0x6, 0x3,
                                    0x0, 0x3, 0x8, 0x1, 0x4, 0xE, 0x9, 0xA, 0x2, 0x6, 0x7, 0xF, 0xD, 0xC, 0x5, 0xB,
                                    0x0, 0x4, 0x2, 0xD, 0x1, 0xA, 0xF, 0xB, 0x9, 0x8, 0x5, 0x7, 0xE, 0x3, 0xC, 0x6,
                                    0x0, 0x5, 0xB, 0x3, 0xC, 0x1, 0x8, 0xD, 0x6, 0xA, 0x9, 0x2, 0x4, 0x7, 0xF, 0xE,
                                    0x0, 0x6, 0x3, 0x2, 0x8, 0xF, 0x1, 0x7, 0x4, 0xC, 0xE, 0xD, 0x9, 0xB, 0xA, 0x5,
                                    0x0, 0x7, 0xA, 0xC, 0x5, 0x4, 0x6, 0x1, 0xB, 0xE, 0x2, 0x8, 0x3, 0xF, 0x9, 0xD,
                                    0x0, 0x8, 0x4, 0x9, 0x2, 0x7, 0xD, 0x5, 0x1, 0x3, 0xA, 0xE, 0xF, 0x6, 0xB, 0xC,
                                    0x0, 0x9, 0xD, 0x7, 0xF, 0xC, 0xA, 0x3, 0xE, 0x1, 0x6, 0xB, 0x5, 0x2, 0x8, 0x4,
                                    0x0, 0xA, 0x5, 0x6, 0xB, 0x2, 0x3, 0x9, 0xC, 0x7, 0x1, 0x4, 0x8, 0xE, 0xD, 0xF,
                                    0x0, 0xB, 0xC, 0x8, 0x6, 0x9, 0x4, 0xF, 0x3, 0x5, 0xD, 0x1, 0x2, 0xA, 0xE, 0x7,
                                    0x0, 0xC, 0x6, 0x4, 0x3, 0xD, 0x2, 0xE, 0x8, 0xB, 0xF, 0x9, 0x1, 0x5, 0x7, 0xA,
                                    0x0, 0xD, 0xF, 0xA, 0xE, 0x6, 0x5, 0x8, 0x7, 0x9, 0x3, 0xC, 0xB, 0x1, 0x4, 0x2,
                                    0x0, 0xE, 0x7, 0xB, 0xA, 0x8, 0xC, 0x2, 0x5, 0xF, 0x4, 0x3, 0x6, 0xD, 0x1, 0x9,
                                    0x0, 0xF, 0xE, 0x5, 0x7, 0x3, 0xB, 0x4, 0xA, 0xD, 0x8, 0x6, 0xC, 0x9, 0x2, 0x1 };



uint8_t gf_add(uint8_t a, uint8_t b);
uint8_t gf_mul_tab(uint8_t a, uint8_t b);
uint8_t gf_div_tab(uint8_t a, uint8_t b);
void gf_poly_scalar_add(uint8_t * a, uint8_t scalar, uint8_t len);
void gf_poly_scalar_mul(uint8_t * a, uint8_t scalar, uint8_t len);

void poly_shift(uint8_t * a, uint8_t * b, uint8_t exponent, uint8_t dir, uint8_t size);

uint8_t poly_deg(uint8_t * a, uint8_t size);

void gf_poly_mod(uint8_t * a, uint8_t * b, uint8_t size);
# 2 "RS/rs.c" 2
# 41 "RS/rs.c"
uint8_t gf_add(uint8_t a, uint8_t b) {
    return a ^ b;
}

uint8_t gf_mul_tab(uint8_t a, uint8_t b) {
    return GF16_mul[a][b];
}

uint8_t gf_div_tab(uint8_t a, uint8_t b) {
    if ((b & 0x0F) == 0) {
        return 0xF0;
    }
    return GF16_div[a][b];
}

void gf_poly_scalar_add(uint8_t * a, uint8_t scalar, uint8_t len) {
    for(uint8_t i = 0; i < len; i++) {
        a[i] = gf_add(a[i], scalar);
    }
}

void gf_poly_scalar_mul(uint8_t * a, uint8_t scalar, uint8_t len) {
    for(uint8_t i = 0; i < len; i++) {
        a[i] = gf_mul_tab(a[i], scalar);
    }
}


void poly_shift(uint8_t * a, uint8_t * b, uint8_t exponent, uint8_t dir, uint8_t size) {
    if(dir) {
        for(uint8_t i = 0; i < size - exponent; i++) {
            b[i] = a[i+exponent];
        }
    } else {
        for(uint8_t i = 0; i < size - exponent; i++) {
            b[size-i-1] = a[size-i-exponent-1];
        }
    }
}

void gf_poly_add(uint8_t * a, uint8_t * b, uint8_t size) {
    for(uint8_t i = 0; i < size; i++) {
        a[i] = gf_add(a[i], b[i]);
    }
}

uint8_t poly_deg(uint8_t * a, uint8_t size) {
    uint8_t degA = 0;
    for(uint8_t i = 0; i < size; i++) {
        if(a[i] != 0) {
            degA = size - 1 - i;
            break;
        }
    }
    return degA;
}




void gf_poly_mod(uint8_t * a, uint8_t * b, uint8_t size) {

    uint8_t tmp_poly[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


    uint8_t tmp_rem[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    for(uint8_t i = 0; i < size; i++) {
        tmp_rem[i] = a[i];
    }

    do {
        uint8_t degA = poly_deg(tmp_rem, 15);
        uint8_t degB = poly_deg(b, 15);

        int8_t exp = degA - degB;


        uint8_t factor = gf_div_tab(tmp_rem[size-1-degA], b[size-1-degB]);

        if((exp > 0) || ((exp == 0) && (factor != 0))) {
            poly_shift(b, tmp_poly, exp, 1, 15);
            gf_poly_scalar_mul(tmp_poly, factor, 15);
            gf_poly_add(tmp_rem, tmp_poly, 15);
        } else {
            for(uint8_t i = size-4; i < size; i++) {
                a[i] = tmp_rem[i];
            }
            break;
        }
    } while (1);
}
